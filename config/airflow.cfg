[core]
#
[webserver]
# The message displayed when a user attempts to execute actions beyond their authorised privileges.
#
# Variable: AIRFLOW__WEBSERVER__ACCESS_DENIED_MESSAGE
#
#access_denied_message = Access is Denied

# Path of webserver config file used for configuring the webserver parameters
#
# Variable: AIRFLOW__WEBSERVER__CONFIG_FILE
#
config_file = /opt/airflow/webserver_config.py

# The base url of your website as airflow cannot guess what domain or
# cname you are using. This is used in automated emails that
# airflow sends to point links to the right web server
#
# Variable: AIRFLOW__WEBSERVER__BASE_URL
#
base_url = http://localhost:8080

# Default timezone to display all dates in the UI, can be UTC, system, or
# any IANA timezone string (e.g. Europe/Amsterdam). If left empty the
# default value of core/default_timezone will be used
#
# Example: default_ui_timezone = America/New_York
#
# Variable: AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE
#
default_ui_timezone = UTC

# The ip specified when starting the web server
#
# Variable: AIRFLOW__WEBSERVER__WEB_SERVER_HOST
#
web_server_host = 0.0.0.0

# The port on which to run the web server
#
# Variable: AIRFLOW__WEBSERVER__WEB_SERVER_PORT
#
web_server_port = 8080

# Paths to the SSL certificate and key for the web server. When both are
# provided SSL will be enabled. This does not change the web server port.
#
# Variable: AIRFLOW__WEBSERVER__WEB_SERVER_SSL_CERT
#
#web_server_ssl_cert = 

# Paths to the SSL certificate and key for the web server. When both are
# provided SSL will be enabled. This does not change the web server port.
#
# Variable: AIRFLOW__WEBSERVER__WEB_SERVER_SSL_KEY
#
#web_server_ssl_key = 

# The type of backend used to store web session data, can be `database` or `securecookie`. For the
# `database` backend, sessions are store in the database (in `session` table) and they can be
# managed there (for example when you reset password of the user, all sessions for that user are
# deleted). For the `securecookie` backend, sessions are stored in encrypted cookies on the client
# side. The `securecookie` mechanism is 'lighter' than database backend, but sessions are not deleted
# when you reset password of the user, which means that other than waiting for expiry time, the only
# way to invalidate all sessions for a user is to change secret_key and restart webserver (which
# also invalidates and logs out all other user's sessions).
# 
# When you are using `database` backend, make sure to keep your database session table small
# by periodically running `airflow db clean --table session` command, especially if you have
# automated API calls that will create a new session for each call rather than reuse the sessions
# stored in browser cookies.
#
# Example: session_backend = securecookie
#
# Variable: AIRFLOW__WEBSERVER__SESSION_BACKEND
#
session_backend = database

# Number of seconds the webserver waits before killing gunicorn master that doesn't respond
#
# Variable: AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT
#
web_server_master_timeout = 250

# Number of seconds the gunicorn webserver waits before timing out on a worker
#
# Variable: AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT
#
web_server_worker_timeout = 250

# Number of workers to refresh at a time. When set to 0, worker refresh is
# disabled. When nonzero, airflow periodically refreshes webserver workers by
# bringing up new ones and killing old ones.
#
# Variable: AIRFLOW__WEBSERVER__WORKER_REFRESH_BATCH_SIZE
#
#worker_refresh_batch_size = 1

# Number of seconds to wait before refreshing a batch of workers.
#
# Variable: AIRFLOW__WEBSERVER__WORKER_REFRESH_INTERVAL
#
#worker_refresh_interval = 6000
